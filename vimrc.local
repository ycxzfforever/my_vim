"定义快捷键的前缀，即<Leader>
let mapleader=";"

"==========主题设置 开始==========
if has('gui_running')
    set background=light
else
    set background=dark
endif

colorscheme default 
"let g:Powerline_colorscheme='solarized256' "设置状态栏主题风格
"colorscheme solarized
"colorscheme molokai
"colorscheme phd
"==========主题设置 结束，共三个主题选择==========

set encoding=utf-8
set termencoding=utf-8
set fileencodings=utf-8,gbk,latin1

syn on          "语法支持
set nu          "设置显示行号"
set ts=4        "设置tab宽度"
set shiftwidth=4  "设置格式化时制表符占用空格数
set softtabstop=4 "让 vim 把连续数量的空格视为一个制表符
set expandtab   "设置使用空格代替，noexpandtab为不使用空格代替"
set ai          "自动缩进
set hls         "设置高亮显示，搜索时高亮显示被找到的文本"
set ru          "该命令打开 VIM 的状态栏标尺"
set sm          "显示括号配对情况"
set autoread    "文件在Vim之外修改过，自动重新读入

"==========代码折叠相关设置 开始===========
"set foldmethod=manual   "手动代码折叠
"set foldmethod=indent  "基于缩进进行代码折叠
set foldmethod=syntax  "基于语法进行代码折叠
set nofoldenable       "启动vim 时关闭折叠代码
"操作：za，打开或关闭当前折叠；zM，关闭所有折叠；zR，打开所有折叠
"==========代码折叠相关设置 结束===========

"=========搜索、vim 命令补全等设置 开始===========
set incsearch       "开启实时搜索功能,搜索时在未完全输入完毕要检索的文本时就开始检索
set ignorecase      "搜索时大小写不敏感,使用n下一个，N上一个
set nocompatible    "关闭兼容模式
set wildmenu        "vim 自身命令行模式智能补全
"=========搜索、vim 命令补全等设置 结束===========

set autoindent
set smartindent
set cin         "打开 C/C++ 风格的自动缩进"
set cino=:0g0t0(sus "设定 C/C++ 风格自动缩进的选项， 这里简要介绍一下这段代码里用到的选项的含义， cino 支持的选项还很多， 更多选项请看用户手册。"

"set cursorline   "高亮显示当前行/列
"set cursorcolumn
"highlight CursorLine   cterm=NONE ctermbg=black ctermfg=red guibg=black guifg=green
"highlight CursorColumn cterm=NONE ctermbg=black ctermfg=red guibg=black guifg=green

set laststatus=5 "总是显示状态栏
set ruler        "显示光标当前位置

syntax enable   "允许用指定语法高亮配色方案替换默认方案
syntax on       "映射代码美化函数到Shift+f快捷键

"==========格式化代码 开始==========
map <S-F> :call FormatCode()<CR>
func! FormatCode()
    exec "w"
    if &filetype == 'c' || &filetype == 'h'
        exec "!astyle --style=allman --suffix=none %"
    elseif &filetype == 'cpp' || &filetype == 'cc' || &filetype == 'hpp'
        exec "!astyle --style=allman --suffix=none %"
    elseif &filetype == 'perl'
        exec "!astyle --style=gnu --suffix=none %"
    elseif &filetype == 'py'|| &filetype == 'python'
        exec "!autopep8 --in-place --aggressive %"
    elseif &filetype == 'java'
        exec "!astyle --style=java --suffix=none %"
    elseif &filetype == 'jsp'
        exec "!astyle --style=gnu --suffix=none %"
    elseif &filetype == 'xml'
        exec "!astyle --style=gnu --suffix=none %"
    else
        exec "normal gg=G"
        return
    endif
endfunc
"==========格式化代码 结束==========

"==========插件管理 开始==========
" vundle 环境设置
filetype off
set rtp+=$HOME/.vim/bundle/Vundle.vim
" vundle 管理的插件列表必须位于 vundle#begin() 和 vundle#end() 之间
call vundle#begin()
" 插件列表开始

Plugin 'VundleVim/Vundle.vim'               "插件管理器
"=======主题3个========
Plugin 'altercation/vim-colors-solarized'
Plugin 'tomasr/molokai'
Plugin 'vim-scripts/phd'
"=======主题3个========
Plugin 'nathanaelkane/vim-indent-guides'    "可视化缩进
Plugin 'derekwyatt/vim-fswitch'             "文件切换 <Leader>sw
Plugin 'majutsushi/tagbar'                  "基于标签的标识符列表 <F3>
"====自动更新tags标签 开始=====
Plugin 'vim-scripts/indexer.tar.gz'
Plugin 'vim-scripts/DfrankUtil'
Plugin 'vim-scripts/vimprj'
"====自动更新tags标签 结束=====
Plugin 'scrooloose/nerdtree'                "树型目录 <F2>
Plugin 'mileszs/ack.vim'                    "内容查找  <Leader>a :Ack!
Plugin 'dyng/ctrlsf.vim'                    "内容查找
Plugin 'terryma/vim-multiple-cursors'       "多光标编辑功能 <C-n>
Plugin 'scrooloose/nerdcommenter'           "注释插件 <Leader>cc,<Leader>cu
Plugin 'vim-scripts/AutoComplPop'           "补全自动弹出

Plugin 'vim-scripts/OmniCppComplete'        "自动补全
Plugin 'SirVer/ultisnips'                   "模板补全
Plugin 'honza/vim-snippets'                 "自动补全 <tab>
Plugin 'vim-scripts/code_complete'          "自动补全 <s-tab>

"Plugin 'Valloric/YouCompleteMe'             "智能补全
" 插件列表结束
call vundle#end()

filetype on "开启文件类型侦测
filetype plugin indent on "根据侦测到的不同类型加载对应的插件
"==========插件管理 结束==========

"==========UltiSnips 的 tab 键与 YCM 冲突，重新设定============
"let g:UltiSnipsExpandTrigger="<leader><tab>"
"let g:UltiSnipsJumpForwardTrigger="<leader><tab>"
"let g:UltiSnipsJumpBackwardTrigger="<leader><s-tab>"

"&&&&&&&&&& code_complete插件设置 &&&&&&&&&&
"let g:completekey = "<Leader><tab>"   "hotkey
let g:completekey = "<s-tab>"   "hotkey

"===========OmniCppComplete 管理===========
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " 显示函数参数列表
let OmniCpp_MayCompleteDot = 1   " 输入 .  后自动补全
let OmniCpp_MayCompleteArrow = 1 " 输入 -> 后自动补全
let OmniCpp_MayCompleteScope = 1 " 输入 :: 后自动补全
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]

"**********插件ack 设置×××××××××××
nnoremap <Leader>a :Ack!<Space>
let g:ackhighlight = 1 "高亮搜索关键词
let g:ack_autofold_results = 1 "使用此选项将结果按文件名折叠在QuffFIX中
let g:ackpreview = 1 "使用此选项自动打开文件“j”或“k”。 
let g:ack_default_options = " -s -H  --nogroup --column --smart-case --follow"

"**********插件multi_curso 设置×××××××××××
"let g:multi_cursor_use_default_mapping=0
" Default mapping
"let g:multi_cursor_start_word_key      = '<C-n>'
let g:multi_cursor_select_all_word_key = '<A-n>'
"let g:multi_cursor_start_key           = 'g<C-n>'
"let g:multi_cursor_select_all_key      = 'g<A-n>'
"let g:multi_cursor_next_key            = '<C-n>'
"let g:multi_cursor_prev_key            = '<C-p>'
"let g:multi_cursor_skip_key            = '<C-x>'
"let g:multi_cursor_quit_key            = '<Esc>'

"**********查找插件ctrlsf设置 Ubuntu14.04没设置成功，报错***************
let g:ctrlsf_ackprg = 'ack-grep'   "设置ctrlsf 使用ag
"使用 ctrlsf.vim 插件在工程内全局查找光标所在关键字，设置快捷键。快捷键速记法：search in project
let g:ctrlsf_open_left = 0
nnoremap <Leader>sp :CtrlSF<CR>
nmap     <C-F> <Plug>CtrlSFPrompt 
"**********查找插件ctrlsf设置 Ubuntu14.04没设置成功，报错***************

"============树形目录设置 开始=========
"使用 NERDTree 插件查看工程文件。设置快捷键，速记：file list
nmap <silent> <Leader>fl :NERDTreeToggle<CR>
nmap <F2> :NERDTree ../../<CR>
" 设置NERDTree子窗口宽度
let NERDTreeWinSize=32
" 设置NERDTree子窗口位置
let NERDTreeWinPos="right"
" 显示隐藏文件
let NERDTreeShowHidden=1
" NERDTree 子窗口中不显示冗余帮助信息
let NERDTreeMinimalUI=1
" 删除文件时自动删除文件对应 buffer
let NERDTreeAutoDeleteBuffer=1
" 显示行号
let NERDTreeShowLineNumbers=1
let NERDTreeAutoCenter=1
" 是否显示隐藏文件
let NERDTreeShowHidden=1
" 在终端启动vim时，共享NERDTree
let g:nerdtree_tabs_open_on_console_startup=1
" 忽略一下文件的显示
let NERDTreeIgnore=['\.pyc','\~$','\.swp']
" 显示书签列表
let NERDTreeShowBookmarks=1
"在NERDTree 中显示git信息
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }
"============树形目录设置 结束=========

"==========="可视化缩进插件设置 开始===========
let g:indent_guides_enable_on_vim_startup=1 "随 vim 自启动
let g:indent_guides_start_level=4           "从第四层开始可视化显示缩进
let g:indent_guides_guide_size=1            "色块宽度
nmap <silent> <Leader>i <Plug>IndentGuidesToggle  
"快捷键 i 开/关缩进可视化
"==========="可视化缩进插件设置 结束===========

"*.c 和 *.h 间切换
nmap <silent> <Leader>sw :FSHere<cr>

"==============tags相关设置 开始===============
"如果经常在不同工程里查阅代码，那么可以添加：
set tags+=tags;
set tags+=$HOME/.vim/systags
set autochdir
function! UpdateCtags()
    let curdir=getcwd()
    while !filereadable("./tags")
        cd ..
        if getcwd() == "/"
            break
        endif
    endwhile
    if filewritable("./tags")
        !ctags -R -I --c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v --fields=+iaSl --extra=+q 
    endif
    execute ":cd " . curdir
endfunction
nmap <F10> :call UpdateCtags()<CR>

" 设置插件 indexer 调用 ctags 的参数
" 默认 --c++-kinds=+p+l，重新设置为 --c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v
" 默认 --fields=+iaS 不满足 YCM 要求，需改为 --fields=+iaSl
let g:indexer_ctagsCommandLineOptions="--c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v --fields=+iaSl --extra=+q"
"==============tags相关设置 结束===============
"
"===========tagbar相关设置 开始=============
let tagbar_left=1 "设置 tagbar 子窗口的位置出现在主编辑区的左边 

"设置显示／隐藏标签列表子窗口的快捷键。速记：identifier list by tag
nmap <silent> <Leader>lt :TagbarToggle<cr> 
nmap <F3> :TagbarToggle<cr> 
let g:tagbar_autofocus = 1 "这是tagbar一打开，光标即在tagbar页面内，默认在vim打开的文件内
let tagbar_width=32 "设置标签子窗口的宽度 
"let g:tagbar_compact=1 "tagbar 子窗口中不显示冗余帮助信息 
"设置 ctags 对哪些代码标识符生成标签
let g:tagbar_type_c = {
    \ 'kinds' : [
         \ 'c:classes:0:1',
         \ 'd:macros:0:1',
         \ 'e:enumerators:0:0', 
         \ 'f:functions:0:1',
         \ 'g:enumeration:0:1',
         \ 'l:local:0:1',
         \ 'm:members:0:1',
         \ 'n:namespaces:0:1',
         \ 'p:functions_prototypes:0:1',
         \ 's:structs:0:1',
         \ 't:typedefs:0:1',
         \ 'u:unions:0:1',
         \ 'v:global:0:1',
         \ 'x:external:0:1'
     \ ],
     \ 'sro'        : '::',
     \ 'kind2scope' : {
         \ 'g' : 'enum',
         \ 'n' : 'namespace',
         \ 'c' : 'class',
         \ 's' : 'struct',
         \ 'u' : 'union'
     \ },
     \ 'scope2kind' : {
         \ 'enum'      : 'g',
         \ 'namespace' : 'n',
         \ 'class'     : 'c',
         \ 'struct'    : 's',
         \ 'union'     : 'u'
     \ } 
     \ }
"===========tagbar相关设置 结束=============
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
    exec "w"
    if &filetype == 'c'
        exec "!gcc % -o %<"
        exec "!time ./%<"
    elseif &filetype == 'cpp'
        exec "!g++ % -o %<"
        exec "!time ./%<"
    elseif &filetype == 'java'
        exec "!javac %"
        exec "!time java %<"
    elseif &filetype == 'sh'
        :!time bash %
    elseif &filetype == 'python'
        exec "!time python2.7 %"
    elseif &filetype == 'html'
        exec "!firefox % &"
    elseif &filetype == 'go'
        "exec "!go build %<"   
        "exec "!time go run %"
    elseif &filetype == 'mkd'
        exec "!~/.vim/markdown.pl % > %.html &"
        exec "!firefox %.html &"
        endif
endfunc

